{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\src\\\\containers\\\\FormModel\\\\Converter\\\\converter.component.js\";\n\nimport React, { useCallback, useState } from 'react';\nimport { successToaster, errorToaster } from \"../../../utils\";\nimport { Select } from \"../../../components/Utils\";\nimport { ShexFormModel, FormModel } from '@inrupt/solid-sdk-forms';\nimport { ConverterTypesList, ConverterTypes } from \"../../../constants\";\nimport { useTranslation } from 'react-i18next';\nimport { FormModelContainer, FormWrapper, Form, Input, Result, ResultHeader, Button, ConverterInput } from \"../form-model.style\";\n/**\n * Form Model Converter UI component, containing the styled components for the Form Model Converter\n * @param props\n */\n\nvar FormModelConverter = function FormModelConverter() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      schemaUrl = _useState2[0],\n      setSchemaUrl = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      layoutUrl = _useState4[0],\n      setLayoutUrl = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      formModel = _useState6[0],\n      setFormModel = _useState6[1];\n\n  var _useState7 = useState(t('formLanguage.shex')),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedInput = _useState8[0],\n      setSelectedInput = _useState8[1];\n\n  var _useState9 = useState(t('formLanguage.shexLayout')),\n      _useState10 = _slicedToArray(_useState9, 2),\n      layoutText = _useState10[0],\n      setLayoutText = _useState10[1];\n\n  var _useState11 = useState(t('formLanguage.shexShape')),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shapeText = _useState12[0],\n      setShapeText = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      hasLayoutFile = _useState14[0],\n      setHasLayoutFile = _useState14[1]; // Temporarily filtering out anything except ShEx as that's all that works currently\n\n\n  var filteredOptions = ConverterTypesList.filter(function (item) {\n    return t(\"formLanguage.\".concat(item)) === t('formLanguage.shex');\n  });\n  var optionsList = filteredOptions.map(function (item) {\n    return t(\"formLanguage.\".concat(item));\n  });\n  /**\n   * Helper function to detect if choice is ShEx or SHACL\n   * @param value\n   * @returns {boolean}\n   */\n\n  var isShEx = function isShEx(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.Shex)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n\n\n  var hasLayout = function hasLayout(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.ShaclExtension)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Change event for the shape/schema URL field\n   */\n\n\n  var onSchemaChange = useCallback(function (e) {\n    setSchemaUrl(e.target.value);\n    setFormModel('');\n  });\n  /**\n   * Change event for layout/extension URL field\n   */\n\n  var onLayoutChange = useCallback(function (e) {\n    setLayoutUrl(e.target.value);\n    setFormModel('');\n  });\n  /**\n   * Use the form library to convert a shex shape to a form model and\n   * set the response to output to a text area\n   * @returns {Promise<void>}\n   */\n\n  var convertShex = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var formModel, schema, shexClass, formModelOutput;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // This code may move to another function, to allow for layouts\n            formModel = new FormModel();\n            _context.next = 3;\n            return formModel.parseSchema(schemaUrl);\n\n          case 3:\n            schema = _context.sent;\n            shexClass = new ShexFormModel(schema);\n            formModelOutput = shexClass.convert();\n            setFormModel(formModelOutput);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   */\n\n  var onSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              _context2.prev = 1;\n              _context2.t0 = selectedInput;\n              _context2.next = _context2.t0 === t('formLanguage.shacl') ? 5 : _context2.t0 === t('formLanguage.shaclExtension') ? 6 : _context2.t0 === t('formLanguage.shex') ? 7 : _context2.t0 === t('formLanguage.shexLayout') ? 10 : 13;\n              break;\n\n            case 5:\n              return _context2.abrupt(\"break\", 15);\n\n            case 6:\n              return _context2.abrupt(\"break\", 15);\n\n            case 7:\n              _context2.next = 9;\n              return convertShex();\n\n            case 9:\n              return _context2.abrupt(\"break\", 15);\n\n            case 10:\n              _context2.next = 12;\n              return convertShex();\n\n            case 12:\n              return _context2.abrupt(\"break\", 15);\n\n            case 13:\n              errorToaster(t('notifications.unknownError'), t('notifications.error'));\n              return _context2.abrupt(\"break\", 15);\n\n            case 15:\n              _context2.next = 20;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t1 = _context2[\"catch\"](1);\n              errorToaster(_context2.t1.message, t('notifications.error'));\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 17]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  /**\n   * Copy the form model directly to the user's computer's clipboard\n   */\n\n  var copyToClipboard = useCallback(function () {\n    navigator.clipboard.writeText(formModel);\n    successToaster(t('formLanguage.converter.copySuccess'), t('notifications.success'));\n  });\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n\n  var onListChange = useCallback(function (e) {\n    var newValue = e.target.value; // Set the label for the label or extension field\n\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    } // Set boolean to disable or enable the layout/extension textbox\n\n\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n  });\n  return /*#__PURE__*/React.createElement(FormModelContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, t('formLanguage.converter.title')), /*#__PURE__*/React.createElement(ConverterInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"selected-filter\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, t('formLanguage.input')), /*#__PURE__*/React.createElement(Select, {\n    name: \"selected-filter\",\n    id: \"selected-filter\",\n    options: optionsList,\n    onChange: onListChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ConverterInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"converter-input\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, shapeText), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"ShExC\",\n    name: \"converter-input\",\n    id: \"converter-input\",\n    onChange: onSchemaChange,\n    value: schemaUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ConverterInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"layout-input\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, layoutText), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: layoutText,\n    onChange: onLayoutChange,\n    disabled: !hasLayoutFile,\n    value: layoutUrl,\n    name: \"layout-input\",\n    id: \"layout-input\",\n    \"data-testid\": \"layout-text-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    \"data-testid\": \"convert-button\",\n    disabled: !(schemaUrl !== ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, t('formLanguage.converter.convert'))), /*#__PURE__*/React.createElement(Result, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResultHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, t('formLanguage.formModel')), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: copyToClipboard,\n    \"data-testid\": \"copy-button\",\n    disabled: !formModel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, t('formLanguage.copyToClipboard'))), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: formModel,\n    onChange: function onChange() {\n      return formModel;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default FormModelConverter;","map":{"version":3,"sources":["D:/Downloads/Test HTML/testgenerator/Test_app/src/containers/FormModel/Converter/converter.component.js"],"names":["React","useCallback","useState","successToaster","errorToaster","Select","ShexFormModel","FormModel","ConverterTypesList","ConverterTypes","useTranslation","FormModelContainer","FormWrapper","Form","Input","Result","ResultHeader","Button","ConverterInput","FormModelConverter","t","schemaUrl","setSchemaUrl","layoutUrl","setLayoutUrl","formModel","setFormModel","selectedInput","setSelectedInput","layoutText","setLayoutText","shapeText","setShapeText","hasLayoutFile","setHasLayoutFile","filteredOptions","filter","item","optionsList","map","isShEx","value","Shex","ShexLayout","hasLayout","ShaclExtension","onSchemaChange","e","target","onLayoutChange","convertShex","parseSchema","schema","shexClass","formModelOutput","convert","onSubmit","preventDefault","message","copyToClipboard","navigator","clipboard","writeText","onListChange","newValue"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { successToaster, errorToaster } from '@utils';\nimport { Select } from '@util-components';\nimport { ShexFormModel, FormModel } from '@inrupt/solid-sdk-forms';\nimport { ConverterTypesList, ConverterTypes } from '@constants';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormModelContainer,\n  FormWrapper,\n  Form,\n  Input,\n  Result,\n  ResultHeader,\n  Button,\n  ConverterInput\n} from '../form-model.style';\n\n/**\n * Form Model Converter UI component, containing the styled components for the Form Model Converter\n * @param props\n */\nconst FormModelConverter = () => {\n  const { t } = useTranslation();\n  const [schemaUrl, setSchemaUrl] = useState('');\n  const [layoutUrl, setLayoutUrl] = useState('');\n  const [formModel, setFormModel] = useState('');\n  const [selectedInput, setSelectedInput] = useState(t('formLanguage.shex'));\n  const [layoutText, setLayoutText] = useState(t('formLanguage.shexLayout'));\n  const [shapeText, setShapeText] = useState(t('formLanguage.shexShape'));\n  const [hasLayoutFile, setHasLayoutFile] = useState(false);\n\n  // Temporarily filtering out anything except ShEx as that's all that works currently\n  const filteredOptions = ConverterTypesList.filter(\n    item => t(`formLanguage.${item}`) === t('formLanguage.shex')\n  );\n  const optionsList = filteredOptions.map(item => t(`formLanguage.${item}`));\n\n  /**\n   * Helper function to detect if choice is ShEx or SHACL\n   * @param value\n   * @returns {boolean}\n   */\n  const isShEx = value =>\n    value === t(`formLanguage.${ConverterTypes.Shex}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n  const hasLayout = value =>\n    value === t(`formLanguage.${ConverterTypes.ShaclExtension}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Change event for the shape/schema URL field\n   */\n  const onSchemaChange = useCallback((e: Event) => {\n    setSchemaUrl(e.target.value);\n    setFormModel('');\n  });\n\n  /**\n   * Change event for layout/extension URL field\n   */\n  const onLayoutChange = useCallback((e: Event) => {\n    setLayoutUrl(e.target.value);\n    setFormModel('');\n  });\n\n  /**\n   * Use the form library to convert a shex shape to a form model and\n   * set the response to output to a text area\n   * @returns {Promise<void>}\n   */\n  const convertShex = useCallback(async () => {\n    // This code may move to another function, to allow for layouts\n    const formModel = new FormModel();\n    const schema = await formModel.parseSchema(schemaUrl);\n    const shexClass = new ShexFormModel(schema);\n    const formModelOutput = shexClass.convert();\n    setFormModel(formModelOutput);\n  });\n\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   */\n  const onSubmit = useCallback(async (e: Event) => {\n    e.preventDefault();\n    try {\n      switch (selectedInput) {\n        case t('formLanguage.shacl'):\n          // Convert Shacl\n          // await convertShacl();\n          break;\n        case t('formLanguage.shaclExtension'):\n          // Convert Shacl with extension\n          break;\n        case t('formLanguage.shex'):\n          await convertShex();\n          break;\n        case t('formLanguage.shexLayout'):\n          // TODO: Add layout code\n          await convertShex();\n          break;\n        default:\n          errorToaster(t('notifications.unknownError'), t('notifications.error'));\n          break;\n      }\n    } catch (e) {\n      errorToaster(e.message, t('notifications.error'));\n    }\n  });\n\n  /**\n   * Copy the form model directly to the user's computer's clipboard\n   */\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(formModel);\n    successToaster(t('formLanguage.converter.copySuccess'), t('notifications.success'));\n  });\n\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n  const onListChange = useCallback((e: Event) => {\n    const newValue = e.target.value;\n\n    // Set the label for the label or extension field\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    }\n\n    // Set boolean to disable or enable the layout/extension textbox\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n  });\n\n  return (\n    <FormModelContainer>\n      <FormWrapper>\n        <Form onSubmit={onSubmit}>\n          <h3>{t('formLanguage.converter.title')}</h3>\n          <ConverterInput>\n            <label htmlFor=\"selected-filter\">{t('formLanguage.input')}</label>\n            <Select\n              name=\"selected-filter\"\n              id=\"selected-filter\"\n              options={optionsList}\n              onChange={onListChange}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"converter-input\">{shapeText}</label>\n            <Input\n              type=\"text\"\n              placeholder=\"ShExC\"\n              name=\"converter-input\"\n              id=\"converter-input\"\n              onChange={onSchemaChange}\n              value={schemaUrl}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"layout-input\">{layoutText}</label>\n            <Input\n              type=\"text\"\n              placeholder={layoutText}\n              onChange={onLayoutChange}\n              disabled={!hasLayoutFile}\n              value={layoutUrl}\n              name=\"layout-input\"\n              id=\"layout-input\"\n              data-testid=\"layout-text-box\"\n            />\n          </ConverterInput>\n          <Button type=\"submit\" data-testid=\"convert-button\" disabled={!(schemaUrl !== '')}>\n            {t('formLanguage.converter.convert')}\n          </Button>\n        </Form>\n        <Result>\n          <ResultHeader>\n            <h4>{t('formLanguage.formModel')}</h4>\n            <button\n              type=\"button\"\n              onClick={copyToClipboard}\n              data-testid=\"copy-button\"\n              disabled={!formModel}\n            >\n              {t('formLanguage.copyToClipboard')}\n            </button>\n          </ResultHeader>\n          <textarea value={formModel} onChange={() => formModel} />\n        </Result>\n      </FormWrapper>\n    </FormModelContainer>\n  );\n};\n\nexport default FormModelConverter;\n"]},"metadata":{},"sourceType":"module"}