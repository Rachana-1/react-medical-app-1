{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\src\\\\containers\\\\Help\\\\welcome.container.js\";\nimport React, { Component } from 'react';\nimport data from '@solid/query-ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport { WelcomePageContent } from \"./welcome.component\";\nimport { successToaster, errorToaster } from \"../../utils\";\nvar defaultProfilePhoto = '/img/icon/empty-profile.svg';\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\n\nexport var Help = /*#__PURE__*/function (_Component) {\n  _inherits(Help, _Component);\n\n  function Help(props) {\n    var _this;\n\n    _classCallCheck(this, Help);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Help).call(this, props));\n    _this.getProfileData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var hasImage, webId, user, nameLd, name, imageLd, image;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                isLoading: true\n              });\n\n              webId = _this.props.webId;\n              /*\n               * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n               * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n               * from the returned user object.\n               */\n\n              user = data[webId];\n              _context.next = 5;\n              return user.vcard_fn;\n\n            case 5:\n              nameLd = _context.sent;\n              name = nameLd && nameLd.value.trim().length > 0 ? nameLd.value : webId.toString();\n              _context.next = 9;\n              return user.vcard_hasPhoto;\n\n            case 9:\n              imageLd = _context.sent;\n\n              if (imageLd && imageLd.value) {\n                image = imageLd.value;\n                hasImage = true;\n              } else {\n                hasImage = false;\n                image = defaultProfilePhoto;\n              }\n              /**\n               * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n               * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n               * it's missing, you can manually add it like we're doing here.\n               *\n               * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n               * property that we're using to store and link the profile image.\n               *\n               * For more information please go to: https://github.com/solid/query-ldflex\n               */\n\n\n              _this.setState({\n                name: name,\n                image: image,\n                isLoading: false,\n                hasImage: hasImage\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.updatePhoto = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(uri, message) {\n        var title,\n            hasImage,\n            user,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                title = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : '';\n                hasImage = _this.state.hasImage;\n                _context2.prev = 2;\n                user = data.user;\n\n                if (!hasImage) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 7;\n                return user.vcard_hasPhoto.set(namedNode(uri));\n\n              case 7:\n                _context2.next = 11;\n                break;\n\n              case 9:\n                _context2.next = 11;\n                return user.vcard_hasPhoto.add(namedNode(uri));\n\n              case 11:\n                successToaster(message, title);\n                _context2.next = 17;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](2);\n                errorToaster(_context2.t0.message, 'Error');\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 14]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false\n    };\n    return _this;\n  }\n\n  _createClass(Help, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var webId = this.props.webId;\n      if (webId) this.getProfileData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var webId = this.props.webId;\n      if (webId && webId !== prevProps.webId) this.getProfileData();\n    }\n    /**\n     * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n     *\n     * This is an example of how to use the LDFlex library to fetch different linked data fields.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(WelcomePageContent, Object.assign({\n        name: name,\n        image: image,\n        isLoading: isLoading,\n        webId: webId,\n        updatePhoto: this.updatePhoto\n      }, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Help;\n}(Component);","map":{"version":3,"sources":["D:/Downloads/Test HTML/react-medical-app/src/containers/Help/welcome.container.js"],"names":["React","Component","data","namedNode","WelcomePageContent","successToaster","errorToaster","defaultProfilePhoto","Help","props","getProfileData","setState","isLoading","webId","user","vcard_fn","nameLd","name","value","trim","length","toString","vcard_hasPhoto","imageLd","image","hasImage","updatePhoto","uri","message","title","state","set","add","prevProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport data from '@solid/query-ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport { WelcomePageContent } from './welcome.component';\nimport { successToaster, errorToaster } from '@utils';\n\nconst defaultProfilePhoto = '/img/icon/empty-profile.svg';\n\n/**\n * Container component for the Welcome Page, containing example of how to fetch data from a POD\n */\nexport class Help extends Component<Props> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      image: defaultProfilePhoto,\n      isLoading: false,\n      hasImage: false\n    };\n  }\n\n  componentDidMount() {\n    const { webId } = this.props;\n    if (webId) this.getProfileData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { webId } = this.props;\n    if (webId && webId !== prevProps.webId) this.getProfileData();\n  }\n\n  /**\n   * This function retrieves a user's card data and tries to grab both the user's name and profile photo if they exist.\n   *\n   * This is an example of how to use the LDFlex library to fetch different linked data fields.\n   */\n  getProfileData = async () => {\n    this.setState({ isLoading: true });\n    let hasImage;\n    const { webId } = this.props;\n    /*\n     * This is an example of how to use LDFlex. Here, we're loading the webID link into a user variable. This user object\n     * will contain all of the data stored in the webID link, such as profile information. Then, we're grabbing the user.name property\n     * from the returned user object.\n     */\n    const user = data[webId];\n    const nameLd = await user.vcard_fn;\n\n    const name = nameLd && nameLd.value.trim().length > 0 ? nameLd.value : webId.toString();\n    const imageLd = await user.vcard_hasPhoto;\n\n    let image;\n    if (imageLd && imageLd.value) {\n      image = imageLd.value;\n      hasImage = true;\n    } else {\n      hasImage = false;\n      image = defaultProfilePhoto;\n    }\n    /**\n     * This is where we set the state with the name and image values. The user[hasPhotoContext] line of code is an example of\n     * what to do when LDFlex doesn't have the full context. LDFlex has many data contexts already in place, but in case\n     * it's missing, you can manually add it like we're doing here.\n     *\n     * The hasPhotoContext variable stores a link to the definition of the vcard ontology and, specifically, the #hasPhoto\n     * property that we're using to store and link the profile image.\n     *\n     * For more information please go to: https://github.com/solid/query-ldflex\n     */\n    this.setState({ name, image, isLoading: false, hasImage });\n  };\n\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n  updatePhoto = async (uri: String, message, title = '') => {\n    const { hasImage } = this.state;\n    try {\n      const { user } = data;\n      if (hasImage) await user.vcard_hasPhoto.set(namedNode(uri));\n      else await user.vcard_hasPhoto.add(namedNode(uri));\n      successToaster(message, title);\n    } catch (error) {\n      errorToaster(error.message, 'Error');\n    }\n  };\n\n  render() {\n    return (\n      <WelcomePageContent {...{ name, image, isLoading, webId, updatePhoto: this.updatePhoto }} />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}