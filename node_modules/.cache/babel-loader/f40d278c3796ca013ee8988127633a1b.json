{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncIterator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\src\\\\containers\\\\TicTacToe\\\\GamePage\\\\children\\\\Game\\\\game.component.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLiveUpdate, useNotification, NotificationTypes } from '@inrupt/solid-react-components';\nimport moment from 'moment';\nimport { ldflexHelper, storageHelper, errorToaster, notification } from \"../../../../../utils\";\nimport ldflex from '@solid/query-ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport tictactoeShape from \"../../../../../contexts/tictactoe-shape.json\";\nimport Board from \"../Board\";\nimport GameAccept from \"../GameAccept\";\nimport { GameWrapper, Metadata } from \"./game.style\";\nvar possibleCombinations = [[0, 4, 8], [2, 4, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8]];\n\nvar Game = function Game(_ref) {\n  var webId = _ref.webId,\n      gameURL = _ref.gameURL,\n      history = _ref.history;\n\n  /** Game Logic */\n  var updates = useLiveUpdate();\n  var timestamp = updates.timestamp;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameDocument = _useState2[0],\n      setGameDocument = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameData = _useState4[0],\n      setGameData = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      result = _useState6[0],\n      setResult = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isProcessing = _useState8[0],\n      setIsProcessing = _useState8[1];\n\n  var _useNotification = useNotification(webId),\n      createNotification = _useNotification.createNotification,\n      createInbox = _useNotification.createInbox;\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rival = _useState10[0],\n      setRival = _useState10[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var appPath = '';\n  var sendNotification = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(player, content, type) {\n      var gameSettings, license, inboxes, to;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return storageHelper.getAppStorage(player);\n\n            case 3:\n              appPath = _context.sent;\n              gameSettings = \"\".concat(appPath, \"settings.ttl\");\n              license = 'https://creativecommons.org/licenses/by-sa/4.0/';\n              /**\n               * Find opponent inboxes from a document link\n               */\n\n              _context.next = 8;\n              return notification.findUserInboxes([{\n                path: player,\n                name: 'Global'\n              }, {\n                path: gameSettings,\n                name: 'Game'\n              }]);\n\n            case 8:\n              inboxes = _context.sent;\n\n              /**\n               * If opponent doesn't have an inbox, show an error with a link to documentation\n               */\n              if (inboxes.length === 0) errorToaster(\"\".concat(player, \" \").concat(t('noInboxOpponent.message')), 'Error', {\n                label: t('noInboxOpponent.link.label'),\n                href: t('noInboxOpponent.link.href')\n              });\n              /**\n               * Find the opponent's game-specific inbox. If it doesn't exist, use the global inbox instead\n               * @to: Opponent inbox path\n               */\n\n              to = notification.getDefaultInbox(inboxes, 'Game', 'Global');\n              /**\n               * Send notification\n               */\n\n              if (!to) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 14;\n              return createNotification(content, to.path, type, license);\n\n            case 14:\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              errorToaster(_context.t0.message, 'Error');\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [gameData, appPath]);\n  /**\n   * If the player's token is 'X' it will return 'O' and viceversa\n   * @param {String} token Token to get the opposite\n   * @returns {String} Opposite token\n   */\n\n  var getSecondToken = useCallback(function (token) {\n    return token === 'X' ? 'O' : 'X';\n  });\n  /**\n   * Generates the moves array for the game. An array of size 9 with all of the played moves\n   * @param {Array<String>} move An array of moves based on moves indexes\n   * @param {String} firstmove Token of the first move of the game\n   * @returns {void}\n   */\n\n  var generateMoves = useCallback(function (move, firstmove) {\n    return move.reduce(function (allSquares, current, i) {\n      var squares = allSquares;\n      var move;\n      if (i % 2 === 0) move = firstmove;else move = getSecondToken(firstmove);\n      squares[current] = move;\n      return squares;\n    }, new Array(9).fill(null));\n  });\n  /**\n   * Gets the entire predicate named Node based on a field property from the shape\n   * @param {String} field Field to get the predicate for\n   * @returns {String} Predicate for a field name\n   */\n\n  var getPredicate = useCallback(function (field) {\n    var prefix = tictactoeShape['@context'][field.prefix];\n    return \"\".concat(prefix).concat(field.predicate);\n  });\n  /**\n   * Checks if it's the user's turn by comparing the status with the user's token\n   * @param {String} status Status of the game\n   * @param {String} token Player's token\n   * @returns {Boolean}\n   */\n\n  var canPlay = useCallback(function (_ref3) {\n    var status = _ref3.status,\n        token = _ref3.token;\n    var isStatusValid = status && status.includes('Move');\n    return isStatusValid ? status.includes(token) : false;\n  });\n  /**\n   * Updates the game status in the game document\n   * @param {String} gamestatus New status for the game to be updated to\n   */\n\n  var changeGameStatus = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gamestatus) {\n      var predicate;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              predicate = 'http://data.totl.net/game/status';\n              _context2.next = 4;\n              return gameDocument[predicate].set(gamestatus);\n\n            case 4:\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              throw _context2.t0;\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [gameDocument]);\n  /**\n   * Get basic info for a player (name and image url)\n   * @param {String} webId WebId of the player to look the Info for\n   * @returns {Object} An object with the basic information of the player\n   */\n\n  var getPlayerInfo = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(webId) {\n      var nameData, imageData, name, image;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return ldflex[webId]['vcard:fn'];\n\n            case 3:\n              nameData = _context3.sent;\n              _context3.next = 6;\n              return ldflex[webId]['vcard:hasPhoto'];\n\n            case 6:\n              imageData = _context3.sent;\n              name = nameData ? nameData.value : webId;\n              image = imageData ? imageData.value : '/img/icon/empty-profile.svg';\n              return _context3.abrupt(\"return\", {\n                name: name,\n                image: image,\n                webId: webId\n              });\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](0);\n              throw _context3.t0;\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 12]]);\n    }));\n\n    return function getPlayerInfo(_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Adds the game document as a link in the opponent's data.ttl file\n   */\n\n\n  var addGameToList = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var url;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return storageHelper.getAppStorage(webId);\n\n            case 2:\n              url = _context4.sent;\n              _context4.next = 5;\n              return ldflex[\"\".concat(url, \"data.ttl\")]['schema:hasPart'].add(namedNode(gameURL));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function addGameToList() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  /**\n   * Accepts the game by changing the status of it to 'Accepted', adding it to the game list and sending a notification to the actor\n   * @param {Function} cb Function to execute once the game has been accepted\n   */\n\n\n  var onAccept = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return changeGameStatus('Move X');\n\n            case 3:\n              _context5.next = 5;\n              return addGameToList();\n\n            case 5:\n              _context5.next = 7;\n              return sendNotification(rival.webId, {\n                title: 'Tictactoe game accepted',\n                summary: 'has accepted your invitation to play a game of TicTacToe.',\n                actor: webId,\n                object: gameURL,\n                target: window.location.href\n              }, NotificationTypes.ACCEPT);\n\n            case 7:\n              _context5.next = 13;\n              break;\n\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5[\"catch\"](0);\n              setIsProcessing(false);\n              errorToaster(_context5.t0.message, 'Error');\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 9]]);\n    }));\n\n    return function onAccept() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  /**\n   * Declines the game by changing the status of it to 'Declined' and sending a notification to the actor\n   * @param {Function} cb Function to execute once the game has been declined\n   */\n\n\n  var onDecline = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return changeGameStatus('Declined');\n\n            case 3:\n              _context6.next = 5;\n              return sendNotification(rival.webId, {\n                title: 'Tictactoe game declined',\n                summary: 'has declined your invitation to play a game of TicTacToe.',\n                actor: webId,\n                object: gameURL,\n                target: window.location.href\n              }, NotificationTypes.REJECT);\n\n            case 5:\n              history.push('/tictactoe');\n              _context6.next = 11;\n              break;\n\n            case 8:\n              _context6.prev = 8;\n              _context6.t0 = _context6[\"catch\"](0);\n              errorToaster(_context6.t0.message, 'Error');\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 8]]);\n    }));\n\n    return function onDecline() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  /**\n   * Gets the rival based on wether or not the player is the owner\n   * @param {Object} gameData Actor, opponent and owner of the game\n   * @returns {Object} Rival data\n   */\n\n\n  var getRival = function getRival(_ref9) {\n    var actor = _ref9.actor,\n        opponent = _ref9.opponent,\n        owner = _ref9.owner;\n    return owner ? opponent : actor;\n  };\n  /**\n   * Gets the raw data from the game's turtle file using ldflex\n   * @returns {Object} An Object with all of the turtle file data\n   */\n\n\n  var fetchRawData = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var game, data, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, field, fieldData;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return ldflexHelper.fetchLdflexDocument(gameURL);\n\n            case 3:\n              game = _context7.sent;\n\n              if (game) {\n                _context7.next = 6;\n                break;\n              }\n\n              throw new Error('404');\n\n            case 6:\n              setGameDocument(game);\n              data = {};\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context7.prev = 10;\n              _iterator = _asyncIterator(tictactoeShape.shape);\n\n            case 12:\n              _context7.next = 14;\n              return _iterator.next();\n\n            case 14:\n              _step = _context7.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context7.next = 18;\n              return _step.value;\n\n            case 18:\n              _value = _context7.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context7.next = 28;\n                break;\n              }\n\n              field = _value;\n              _context7.next = 23;\n              return game[getPredicate(field)];\n\n            case 23:\n              fieldData = _context7.sent;\n              data = _objectSpread({}, data, _defineProperty({}, field.predicate, fieldData && fieldData.value));\n\n            case 25:\n              _iteratorNormalCompletion = true;\n              _context7.next = 12;\n              break;\n\n            case 28:\n              _context7.next = 34;\n              break;\n\n            case 30:\n              _context7.prev = 30;\n              _context7.t0 = _context7[\"catch\"](10);\n              _didIteratorError = true;\n              _iteratorError = _context7.t0;\n\n            case 34:\n              _context7.prev = 34;\n              _context7.prev = 35;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context7.next = 39;\n                break;\n              }\n\n              _context7.next = 39;\n              return _iterator.return();\n\n            case 39:\n              _context7.prev = 39;\n\n              if (!_didIteratorError) {\n                _context7.next = 42;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 42:\n              return _context7.finish(39);\n\n            case 43:\n              return _context7.finish(34);\n\n            case 44:\n              return _context7.abrupt(\"return\", data);\n\n            case 47:\n              _context7.prev = 47;\n              _context7.t1 = _context7[\"catch\"](0);\n              throw _context7.t1;\n\n            case 50:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 47], [10, 30, 34, 44], [35,, 39, 43]]);\n    }));\n\n    return function fetchRawData() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  /**\n   *  Checks wether or not there is a winner or a tie (game is over)\n   * @param {Array} moves Array of game's moves\n   * @return {Object} A winner object\n   */\n\n\n  var checkForWinnerOrTie = function checkForWinnerOrTie(moves) {\n    if (!moves) return null;\n    var isMovesFull = moves.filter(function (move) {\n      return move === null;\n    }).length === 0;\n    var gameResult = {};\n\n    var _iterator2 = _createForOfIteratorHelper(possibleCombinations),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var combination = _step2.value;\n\n        var _combination = _slicedToArray(combination, 3),\n            first = _combination[0],\n            second = _combination[1],\n            third = _combination[2];\n\n        if (moves[first] !== null && moves[first] === moves[second] && moves[first] === moves[third]) {\n          gameResult = {\n            win: true,\n            combination: combination,\n            token: moves[first],\n            finished: true\n          };\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (!gameResult.win && isMovesFull) gameResult = {\n      win: false,\n      finished: true\n    };\n    setResult(gameResult);\n    return gameResult;\n  };\n  /**\n   * If there's a winner or a tie, the gamestatus gets changed to 'Finished'\n   * @param {Object} data Game data\n   */\n\n\n  var checkWinnerOrNextPlayer = useCallback( /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data) {\n      var moves, result, status;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              moves = data.moves;\n              _context8.next = 3;\n              return checkForWinnerOrTie(moves);\n\n            case 3:\n              result = _context8.sent;\n              status = result.finished ? 'Finished' : data.status;\n              _context8.next = 7;\n              return changeGameStatus(status);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x6) {\n      return _ref11.apply(this, arguments);\n    };\n  }(), [gameData]);\n  /**\n   * Gets the game for an initial render and sets the basic game data\n   */\n\n  var getInitialGame = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n    var gameDocData, actor, opponent, owner, _rival, token, move, moves, myTurn, newData;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return fetchRawData();\n\n          case 3:\n            gameDocData = _context9.sent;\n            _context9.next = 6;\n            return getPlayerInfo(gameDocData.actor);\n\n          case 6:\n            actor = _context9.sent;\n            _context9.next = 9;\n            return getPlayerInfo(gameDocData.opponent);\n\n          case 9:\n            opponent = _context9.sent;\n            owner = webId === actor.webId;\n            _rival = getRival({\n              actor: actor,\n              opponent: opponent,\n              owner: owner\n            });\n            token = owner ? getSecondToken(gameDocData.initialState) : gameDocData.initialState;\n            move = gameDocData.move ? gameDocData.move.split('-') : [];\n            moves = generateMoves(move, gameDocData.initialState);\n            myTurn = canPlay({\n              status: gameDocData.status,\n              moves: moves,\n              token: token\n            });\n            newData = _objectSpread({}, gameDocData, {\n              actor: actor,\n              opponent: opponent,\n              move: move,\n              moves: moves,\n              owner: owner,\n              rival: _rival,\n              token: token,\n              canPlay: myTurn\n            });\n            setRival(_rival);\n            setGameData(newData);\n            if (gameDocData.status === 'Finished') checkForWinnerOrTie(moves);\n            _context9.next = 25;\n            break;\n\n          case 22:\n            _context9.prev = 22;\n            _context9.t0 = _context9[\"catch\"](0);\n            if (_context9.t0.message === '404') history.push('404');else errorToaster(_context9.t0.message, 'Error');\n\n          case 25:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 22]]);\n  })));\n  /**\n   * Gets game for any fetch except the initial one\n   * Set the moves, the game status and wether or not is my turn for the game data\n   */\n\n  var getGame = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n    var gameDocData, move, status, moves, myTurn, newData;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return fetchRawData();\n\n          case 3:\n            gameDocData = _context10.sent;\n\n            if (!(gameDocData.status === gameData.status)) {\n              _context10.next = 6;\n              break;\n            }\n\n            return _context10.abrupt(\"return\");\n\n          case 6:\n            move = gameDocData.move ? gameDocData.move.split('-') : [];\n            status = gameDocData.status;\n            moves = generateMoves(move, gameDocData.initialState);\n            myTurn = canPlay({\n              status: gameDocData.status,\n              moves: moves,\n              token: gameData.token\n            });\n            newData = _objectSpread({}, gameData, {\n              move: move,\n              moves: moves,\n              canPlay: myTurn,\n              status: status\n            });\n            setGameData(newData);\n            if (status === 'Finished') checkForWinnerOrTie(moves);\n            _context10.next = 18;\n            break;\n\n          case 15:\n            _context10.prev = 15;\n            _context10.t0 = _context10[\"catch\"](0);\n            if (_context10.t0.message === '404') history.push('404');else errorToaster(_context10.t0.message, 'Error');\n\n          case 18:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 15]]);\n  })), [gameURL, gameData]);\n  var addMoves = useCallback( /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(array) {\n      var moves, predicate;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              moves = array.join('-');\n              predicate = 'http://data.totl.net/game/move';\n              _context11.next = 5;\n              return gameDocument[predicate].delete();\n\n            case 5:\n              _context11.next = 7;\n              return gameDocument[predicate].add(moves);\n\n            case 7:\n              _context11.next = 12;\n              break;\n\n            case 9:\n              _context11.prev = 9;\n              _context11.t0 = _context11[\"catch\"](0);\n              throw _context11.t0;\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[0, 9]]);\n    }));\n\n    return function (_x7) {\n      return _ref14.apply(this, arguments);\n    };\n  }());\n  /**\n   * Generate a new move for the game, checks if the game is done and sends a notification to the rival\n   * @param {String} index Index of the move about to be make\n   */\n\n  var onMove = useCallback( /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index) {\n      var moves, move, token, _rival2, newMoves, newOrder, status, newData;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              setIsProcessing(true);\n              moves = gameData.moves, move = gameData.move, token = gameData.token, _rival2 = gameData.rival;\n\n              if (!(moves[index] === null)) {\n                _context12.next = 17;\n                break;\n              }\n\n              newMoves = moves;\n              newMoves[index] = token;\n              newOrder = [].concat(_toConsumableArray(move), [index]);\n              status = \"Move \".concat(getSecondToken(token));\n              newData = _objectSpread({}, gameData, {\n                move: newOrder,\n                moves: newMoves,\n                status: status,\n                canPlay: canPlay({\n                  status: status,\n                  lastmove: token,\n                  token: token\n                })\n              });\n              setGameData(newData);\n              _context12.next = 12;\n              return addMoves(newOrder);\n\n            case 12:\n              _context12.next = 14;\n              return checkWinnerOrNextPlayer(newData);\n\n            case 14:\n              _context12.next = 16;\n              return sendNotification(_rival2.webId, {\n                title: 'Tictactoe move',\n                summary: 'A move has been made in your Tic-Tac-Toe game.',\n                actor: webId,\n                object: gameURL,\n                target: window.location.href\n              }, NotificationTypes.ANNOUNCE);\n\n            case 16:\n              setIsProcessing(false);\n\n            case 17:\n              _context12.next = 23;\n              break;\n\n            case 19:\n              _context12.prev = 19;\n              _context12.t0 = _context12[\"catch\"](0);\n              setIsProcessing(false);\n              errorToaster(_context12.t0.message, 'Error');\n\n            case 23:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[0, 19]]);\n    }));\n\n    return function (_x8) {\n      return _ref15.apply(this, arguments);\n    };\n  }(), [gameData]);\n  /**\n   * Initialize the app storage location\n   */\n\n  var initAppStorage = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n    var gamePath;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return storageHelper.getAppStorage(webId);\n\n          case 2:\n            gamePath = _context13.sent;\n\n            if (gameURL) {\n              createInbox(\"\".concat(gamePath, \"inbox/\"), gamePath);\n              getInitialGame();\n            }\n\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  })), [webId]);\n  /**\n   * Executes when the game is mounted the first time\n   */\n\n  useEffect(function () {\n    try {\n      initAppStorage();\n    } catch (e) {\n      /**\n       * Check if something fails when we try to create a inbox\n       * and show user a possible solution\n       */\n      if (e.name === 'Inbox Error') {\n        return errorToaster(e.message, 'Error', {\n          label: t('errorCreateInbox.link.label'),\n          href: t('errorCreateInbox.link.href')\n        });\n      }\n\n      errorToaster(e.message, 'Error');\n    }\n  }, []);\n  /**\n   * Executes everytime the gameUrl changes or when the Live update detects a change\n   */\n\n  useEffect(function () {\n    if ((gameURL || timestamp) && !isProcessing && gameData.actor) getGame();\n  }, [gameURL, timestamp]);\n  return /*#__PURE__*/React.createElement(GameWrapper, {\n    \"data-testid\": \"game\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 5\n    }\n  }, Object.keys(gameData).length > 0 && /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }\n  }, !gameData.owner && (gameData.status === 'Awaiting' || gameData.status === 'Invite Sent') && /*#__PURE__*/React.createElement(GameAccept, Object.assign({}, _objectSpread({}, gameData, {\n    onAccept: onAccept,\n    onDecline: onDecline\n  }), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Metadata, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 15\n    }\n  }, t('game.playingAgainst'), rival && /*#__PURE__*/React.createElement(\"a\", {\n    href: rival.webId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 21\n    }\n  }, rival.name))), !result && !gameData.canPlay && /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 46\n    }\n  }, t('game.notYourTurn')), result && result.finished && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 15\n    }\n  }, result.win && (result.token === gameData.token ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 21\n    }\n  }, t('game.winnerMsg')) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 21\n    }\n  }, t('game.loserMsg'))), !result.win && /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 33\n    }\n  }, t('game.tieMsg'))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }\n  }, t('game.status'), \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 34\n    }\n  }, gameData.status))), gameData.moves && /*#__PURE__*/React.createElement(Board, Object.assign({\n    squares: gameData.moves,\n    onMove: onMove,\n    canPlay: gameData.canPlay,\n    result: result\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  })), gameData && /*#__PURE__*/React.createElement(Metadata, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 15\n    }\n  }, t('game.created'), \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 37\n    }\n  }, moment(gameData.created).format('MMM Do, YYYY'))), result && result.win ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 19\n    }\n  }, t('game.winnerObj'), \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 43\n    }\n  }, result.token), \" with\", ' ', /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 21\n    }\n  }, result.combination.join('-')))) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 17\n    }\n  }, t('game.token'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 19\n    }\n  }, gameData.token)))));\n};\n\nexport default Game;","map":{"version":3,"sources":["D:/Downloads/Test HTML/testgenerator/Test_app/src/containers/TicTacToe/GamePage/children/Game/game.component.js"],"names":["React","Fragment","useEffect","useState","useCallback","useTranslation","useLiveUpdate","useNotification","NotificationTypes","moment","ldflexHelper","storageHelper","errorToaster","notification","ldflex","namedNode","tictactoeShape","Board","GameAccept","GameWrapper","Metadata","possibleCombinations","Game","webId","gameURL","history","updates","timestamp","gameDocument","setGameDocument","gameData","setGameData","result","setResult","isProcessing","setIsProcessing","createNotification","createInbox","rival","setRival","t","appPath","sendNotification","player","content","type","getAppStorage","gameSettings","license","findUserInboxes","path","name","inboxes","length","label","href","to","getDefaultInbox","message","getSecondToken","token","generateMoves","move","firstmove","reduce","allSquares","current","i","squares","Array","fill","getPredicate","field","prefix","predicate","canPlay","status","isStatusValid","includes","changeGameStatus","gamestatus","set","getPlayerInfo","nameData","imageData","value","image","addGameToList","url","add","onAccept","title","summary","actor","object","target","window","location","ACCEPT","onDecline","REJECT","push","getRival","opponent","owner","fetchRawData","fetchLdflexDocument","game","Error","data","shape","fieldData","checkForWinnerOrTie","moves","isMovesFull","filter","gameResult","combination","first","second","third","win","finished","checkWinnerOrNextPlayer","getInitialGame","gameDocData","initialState","split","myTurn","newData","getGame","addMoves","array","join","delete","onMove","index","newMoves","newOrder","lastmove","ANNOUNCE","initAppStorage","gamePath","e","Object","keys","created","format"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLiveUpdate, useNotification, NotificationTypes } from '@inrupt/solid-react-components';\nimport moment from 'moment';\nimport { ldflexHelper, storageHelper, errorToaster, notification } from '@utils';\nimport ldflex from '@solid/query-ldflex';\nimport { namedNode } from '@rdfjs/data-model';\nimport tictactoeShape from '@contexts/tictactoe-shape.json';\nimport Board from '../Board';\nimport GameAccept from '../GameAccept';\nimport { GameWrapper, Metadata } from './game.style';\n\nconst possibleCombinations = [\n  [0, 4, 8],\n  [2, 4, 6],\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8]\n];\ntype Props = { webId: String, gameURL: String, history: Object };\n\nconst Game = ({ webId, gameURL, history }: Props) => {\n  /** Game Logic */\n  const updates = useLiveUpdate();\n  const { timestamp } = updates;\n  const [gameDocument, setGameDocument] = useState(null);\n  const [gameData, setGameData] = useState({});\n  const [result, setResult] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { createNotification, createInbox } = useNotification(webId);\n  const [rival, setRival] = useState(null);\n  const { t } = useTranslation();\n\n  let appPath = '';\n\n  const sendNotification = useCallback(\n    async (player, content, type) => {\n      try {\n        /**\n         * Get full opponent game path\n         */\n        appPath = await storageHelper.getAppStorage(player);\n        const gameSettings = `${appPath}settings.ttl`;\n        const license = 'https://creativecommons.org/licenses/by-sa/4.0/';\n\n        /**\n         * Find opponent inboxes from a document link\n         */\n        const inboxes = await notification.findUserInboxes([\n          { path: player, name: 'Global' },\n          { path: gameSettings, name: 'Game' }\n        ]);\n\n        /**\n         * If opponent doesn't have an inbox, show an error with a link to documentation\n         */\n        if (inboxes.length === 0)\n          errorToaster(`${player} ${t('noInboxOpponent.message')}`, 'Error', {\n            label: t('noInboxOpponent.link.label'),\n            href: t('noInboxOpponent.link.href')\n          });\n        /**\n         * Find the opponent's game-specific inbox. If it doesn't exist, use the global inbox instead\n         * @to: Opponent inbox path\n         */\n        const to = notification.getDefaultInbox(inboxes, 'Game', 'Global');\n        /**\n         * Send notification\n         */\n        if (to) {\n          await createNotification(content, to.path, type, license);\n        }\n      } catch (error) {\n        errorToaster(error.message, 'Error');\n      }\n    },\n    [gameData, appPath]\n  );\n\n  /**\n   * If the player's token is 'X' it will return 'O' and viceversa\n   * @param {String} token Token to get the opposite\n   * @returns {String} Opposite token\n   */\n  const getSecondToken = useCallback(token => (token === 'X' ? 'O' : 'X'));\n\n  /**\n   * Generates the moves array for the game. An array of size 9 with all of the played moves\n   * @param {Array<String>} move An array of moves based on moves indexes\n   * @param {String} firstmove Token of the first move of the game\n   * @returns {void}\n   */\n  const generateMoves = useCallback((move: Array<String>, firstmove: String) =>\n    move.reduce((allSquares, current, i) => {\n      const squares = allSquares;\n      let move;\n      if (i % 2 === 0) move = firstmove;\n      else move = getSecondToken(firstmove);\n      squares[current] = move;\n      return squares;\n    }, new Array(9).fill(null))\n  );\n\n  /**\n   * Gets the entire predicate named Node based on a field property from the shape\n   * @param {String} field Field to get the predicate for\n   * @returns {String} Predicate for a field name\n   */\n  const getPredicate = useCallback(field => {\n    const prefix = tictactoeShape['@context'][field.prefix];\n    return `${prefix}${field.predicate}`;\n  });\n\n  /**\n   * Checks if it's the user's turn by comparing the status with the user's token\n   * @param {String} status Status of the game\n   * @param {String} token Player's token\n   * @returns {Boolean}\n   */\n  const canPlay = useCallback(({ status, token }) => {\n    const isStatusValid = status && status.includes('Move');\n    return isStatusValid ? status.includes(token) : false;\n  });\n\n  /**\n   * Updates the game status in the game document\n   * @param {String} gamestatus New status for the game to be updated to\n   */\n  const changeGameStatus = useCallback(\n    async gamestatus => {\n      try {\n        const predicate = 'http://data.totl.net/game/status';\n        await gameDocument[predicate].set(gamestatus);\n      } catch (e) {\n        throw e;\n      }\n    },\n    [gameDocument]\n  );\n\n  /**\n   * Get basic info for a player (name and image url)\n   * @param {String} webId WebId of the player to look the Info for\n   * @returns {Object} An object with the basic information of the player\n   */\n  const getPlayerInfo = async webId => {\n    try {\n      const nameData = await ldflex[webId]['vcard:fn'];\n      const imageData = await ldflex[webId]['vcard:hasPhoto'];\n      const name = nameData ? nameData.value : webId;\n      const image = imageData ? imageData.value : '/img/icon/empty-profile.svg';\n      return { name, image, webId };\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  /**\n   * Adds the game document as a link in the opponent's data.ttl file\n   */\n  const addGameToList = async () => {\n    const url = await storageHelper.getAppStorage(webId);\n    await ldflex[`${url}data.ttl`]['schema:hasPart'].add(namedNode(gameURL));\n  };\n\n  /**\n   * Accepts the game by changing the status of it to 'Accepted', adding it to the game list and sending a notification to the actor\n   * @param {Function} cb Function to execute once the game has been accepted\n   */\n  const onAccept = async () => {\n    try {\n      await changeGameStatus('Move X');\n      await addGameToList();\n      await sendNotification(\n        rival.webId,\n        {\n          title: 'Tictactoe game accepted',\n          summary: 'has accepted your invitation to play a game of TicTacToe.',\n          actor: webId,\n          object: gameURL,\n          target: window.location.href\n        },\n        NotificationTypes.ACCEPT\n      );\n    } catch (e) {\n      setIsProcessing(false);\n      errorToaster(e.message, 'Error');\n    }\n  };\n  /**\n   * Declines the game by changing the status of it to 'Declined' and sending a notification to the actor\n   * @param {Function} cb Function to execute once the game has been declined\n   */\n  const onDecline = async () => {\n    try {\n      await changeGameStatus('Declined');\n      await sendNotification(\n        rival.webId,\n        {\n          title: 'Tictactoe game declined',\n          summary: 'has declined your invitation to play a game of TicTacToe.',\n          actor: webId,\n          object: gameURL,\n          target: window.location.href\n        },\n        NotificationTypes.REJECT\n      );\n      history.push('/tictactoe');\n    } catch (e) {\n      errorToaster(e.message, 'Error');\n    }\n  };\n\n  /**\n   * Gets the rival based on wether or not the player is the owner\n   * @param {Object} gameData Actor, opponent and owner of the game\n   * @returns {Object} Rival data\n   */\n  const getRival = ({ actor, opponent, owner }) => (owner ? opponent : actor);\n\n  /**\n   * Gets the raw data from the game's turtle file using ldflex\n   * @returns {Object} An Object with all of the turtle file data\n   */\n  const fetchRawData = async () => {\n    try {\n      const game = await ldflexHelper.fetchLdflexDocument(gameURL);\n      if (!game) throw new Error('404');\n      setGameDocument(game);\n      let data = {};\n      for await (const field of tictactoeShape.shape) {\n        const fieldData = await game[getPredicate(field)];\n        data = { ...data, [field.predicate]: fieldData && fieldData.value };\n      }\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  /**\n   *  Checks wether or not there is a winner or a tie (game is over)\n   * @param {Array} moves Array of game's moves\n   * @return {Object} A winner object\n   */\n  const checkForWinnerOrTie = (moves: Array) => {\n    if (!moves) return null;\n    const isMovesFull = moves.filter(move => move === null).length === 0;\n    let gameResult = {};\n    for (const combination of possibleCombinations) {\n      const [first, second, third] = combination;\n      if (\n        moves[first] !== null &&\n        moves[first] === moves[second] &&\n        moves[first] === moves[third]\n      ) {\n        gameResult = { win: true, combination, token: moves[first], finished: true };\n        break;\n      }\n    }\n    if (!gameResult.win && isMovesFull) gameResult = { win: false, finished: true };\n    setResult(gameResult);\n    return gameResult;\n  };\n\n  /**\n   * If there's a winner or a tie, the gamestatus gets changed to 'Finished'\n   * @param {Object} data Game data\n   */\n  const checkWinnerOrNextPlayer = useCallback(\n    async data => {\n      const { moves } = data;\n      const result = await checkForWinnerOrTie(moves);\n      const status = result.finished ? 'Finished' : data.status;\n      await changeGameStatus(status);\n    },\n    [gameData]\n  );\n\n  /**\n   * Gets the game for an initial render and sets the basic game data\n   */\n  const getInitialGame = useCallback(async () => {\n    try {\n      const gameDocData = await fetchRawData();\n      const actor = await getPlayerInfo(gameDocData.actor);\n      const opponent = await getPlayerInfo(gameDocData.opponent);\n      const owner = webId === actor.webId;\n      const rival = getRival({ actor, opponent, owner });\n      const token = owner ? getSecondToken(gameDocData.initialState) : gameDocData.initialState;\n      const move = gameDocData.move ? gameDocData.move.split('-') : [];\n      const moves = generateMoves(move, gameDocData.initialState);\n      const myTurn = canPlay({\n        status: gameDocData.status,\n        moves,\n        token\n      });\n\n      const newData = {\n        ...gameDocData,\n        actor,\n        opponent,\n        move,\n        moves,\n        owner,\n        rival,\n        token,\n        canPlay: myTurn\n      };\n      setRival(rival);\n      setGameData(newData);\n      if (gameDocData.status === 'Finished') checkForWinnerOrTie(moves);\n    } catch (e) {\n      if (e.message === '404') history.push('404');\n      else errorToaster(e.message, 'Error');\n    }\n  });\n\n  /**\n   * Gets game for any fetch except the initial one\n   * Set the moves, the game status and wether or not is my turn for the game data\n   */\n  const getGame = useCallback(async () => {\n    try {\n      const gameDocData = await fetchRawData();\n      if (gameDocData.status === gameData.status) {\n        return;\n      }\n      const move = gameDocData.move ? gameDocData.move.split('-') : [];\n      const { status } = gameDocData;\n      const moves = generateMoves(move, gameDocData.initialState);\n      const myTurn = canPlay({\n        status: gameDocData.status,\n        moves,\n        token: gameData.token\n      });\n      const newData = { ...gameData, move, moves, canPlay: myTurn, status };\n      setGameData(newData);\n      if (status === 'Finished') checkForWinnerOrTie(moves);\n    } catch (e) {\n      if (e.message === '404') history.push('404');\n      else errorToaster(e.message, 'Error');\n    }\n  }, [gameURL, gameData]);\n\n  const addMoves = useCallback(async array => {\n    try {\n      const moves = array.join('-');\n      const predicate = 'http://data.totl.net/game/move';\n      await gameDocument[predicate].delete();\n      await gameDocument[predicate].add(moves);\n    } catch (e) {\n      throw e;\n    }\n  });\n\n  /**\n   * Generate a new move for the game, checks if the game is done and sends a notification to the rival\n   * @param {String} index Index of the move about to be make\n   */\n  const onMove = useCallback(\n    async index => {\n      try {\n        setIsProcessing(true);\n        const { moves, move, token, rival } = gameData;\n        if (moves[index] === null) {\n          const newMoves = moves;\n          newMoves[index] = token;\n          const newOrder = [...move, index];\n          const status = `Move ${getSecondToken(token)}`;\n          const newData = {\n            ...gameData,\n            move: newOrder,\n            moves: newMoves,\n            status,\n            canPlay: canPlay({ status, lastmove: token, token })\n          };\n          setGameData(newData);\n          await addMoves(newOrder);\n          await checkWinnerOrNextPlayer(newData);\n\n          await sendNotification(\n            rival.webId,\n            {\n              title: 'Tictactoe move',\n              summary: 'A move has been made in your Tic-Tac-Toe game.',\n              actor: webId,\n              object: gameURL,\n              target: window.location.href\n            },\n            NotificationTypes.ANNOUNCE\n          );\n          setIsProcessing(false);\n        }\n      } catch (e) {\n        setIsProcessing(false);\n        errorToaster(e.message, 'Error');\n      }\n    },\n    [gameData]\n  );\n\n  /**\n   * Initialize the app storage location\n   */\n  const initAppStorage = useCallback(async () => {\n    const gamePath = await storageHelper.getAppStorage(webId);\n    if (gameURL) {\n      createInbox(`${gamePath}inbox/`, gamePath);\n      getInitialGame();\n    }\n  }, [webId]);\n\n  /**\n   * Executes when the game is mounted the first time\n   */\n  useEffect(() => {\n    try {\n      initAppStorage();\n    } catch (e) {\n      /**\n       * Check if something fails when we try to create a inbox\n       * and show user a possible solution\n       */\n      if (e.name === 'Inbox Error') {\n        return errorToaster(e.message, 'Error', {\n          label: t('errorCreateInbox.link.label'),\n          href: t('errorCreateInbox.link.href')\n        });\n      }\n      errorToaster(e.message, 'Error');\n    }\n  }, []);\n\n  /**\n   * Executes everytime the gameUrl changes or when the Live update detects a change\n   */\n  useEffect(() => {\n    if ((gameURL || timestamp) && !isProcessing && gameData.actor) getGame();\n  }, [gameURL, timestamp]);\n\n  return (\n    <GameWrapper data-testid=\"game\">\n      {Object.keys(gameData).length > 0 && (\n        <Fragment>\n          {!gameData.owner &&\n            (gameData.status === 'Awaiting' || gameData.status === 'Invite Sent') && (\n              <GameAccept {...{ ...gameData, onAccept, onDecline }} />\n            )}\n          <Metadata>\n            {\n              <div>\n                {t('game.playingAgainst')}\n                {rival && (\n                  <a href={rival.webId}>\n                    <strong>{rival.name}</strong>\n                  </a>\n                )}\n              </div>\n            }\n\n            {!result && !gameData.canPlay && <span>{t('game.notYourTurn')}</span>}\n            {result && result.finished && (\n              <div>\n                {result.win &&\n                  (result.token === gameData.token ? (\n                    <span>{t('game.winnerMsg')}</span>\n                  ) : (\n                    <span>{t('game.loserMsg')}</span>\n                  ))}\n                {!result.win && <span>{t('game.tieMsg')}</span>}\n              </div>\n            )}\n            <span>\n              {t('game.status')} <b>{gameData.status}</b>\n            </span>\n          </Metadata>\n          {gameData.moves && (\n            <Board\n              {...{\n                squares: gameData.moves,\n                onMove,\n                canPlay: gameData.canPlay,\n                result\n              }}\n            />\n          )}\n          {gameData && (\n            <Metadata>\n              <span>\n                {t('game.created')} <b>{moment(gameData.created).format('MMM Do, YYYY')}</b>\n              </span>\n              {result && result.win ? (\n                <Fragment>\n                  <span>\n                    {t('game.winnerObj')} <strong>{result.token}</strong> with{' '}\n                    <b>{result.combination.join('-')}</b>\n                  </span>\n                </Fragment>\n              ) : (\n                <span>\n                  {t('game.token')}\n                  <strong>{gameData.token}</strong>\n                </span>\n              )}\n            </Metadata>\n          )}\n        </Fragment>\n      )}\n    </GameWrapper>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}