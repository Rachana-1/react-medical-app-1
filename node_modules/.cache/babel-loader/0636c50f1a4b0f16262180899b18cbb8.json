{"ast":null,"code":"import _objectSpread from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"D:\\\\Downloads\\\\Test HTML\\\\react-medical-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\nimport { ldflexHelper } from \"./index\";\nexport var sendNotification = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opponent, content, createNotification, to) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!to) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", createNotification(content, to));\n\n          case 3:\n            throw new Error('Error: The opponent does not have an available inbox');\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error(_context.t0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 6]]);\n  }));\n\n  return function sendNotification(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var findUserInboxes = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paths) {\n    var inboxes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, path, currentPath, inbox;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            inboxes = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 4;\n            _iterator = _asyncIterator(paths);\n\n          case 6:\n            _context2.next = 8;\n            return _iterator.next();\n\n          case 8:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 12;\n            return _step.value;\n\n          case 12:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 23;\n              break;\n            }\n\n            path = _value;\n            currentPath = path.path;\n            _context2.next = 18;\n            return ldflexHelper.discoverInbox(currentPath);\n\n          case 18:\n            inbox = _context2.sent;\n\n            if (inbox) {\n              inboxes = [].concat(_toConsumableArray(inboxes), [_objectSpread({}, path, {\n                path: inbox\n              })]);\n            }\n\n          case 20:\n            _iteratorNormalCompletion = true;\n            _context2.next = 6;\n            break;\n\n          case 23:\n            _context2.next = 29;\n            break;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 29:\n            _context2.prev = 29;\n            _context2.prev = 30;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 34;\n              break;\n            }\n\n            _context2.next = 34;\n            return _iterator.return();\n\n          case 34:\n            _context2.prev = 34;\n\n            if (!_didIteratorError) {\n              _context2.next = 37;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 37:\n            return _context2.finish(34);\n\n          case 38:\n            return _context2.finish(29);\n\n          case 39:\n            return _context2.abrupt(\"return\", inboxes);\n\n          case 42:\n            _context2.prev = 42;\n            _context2.t1 = _context2[\"catch\"](0);\n            throw new Error(_context2.t1);\n\n          case 45:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 42], [4, 25, 29, 39], [30,, 34, 38]]);\n  }));\n\n  return function findUserInboxes(_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getDefaultInbox = function getDefaultInbox(inboxes, inbox1, inbox2) {\n  return inboxes.find(function (inbox) {\n    return inbox.name === inbox1;\n  }) || inboxes.find(function (inbox) {\n    return inbox.name === inbox2;\n  });\n};","map":{"version":3,"sources":["D:/Downloads/Test HTML/react-medical-app/src/utils/notification.js"],"names":["ldflexHelper","sendNotification","opponent","content","createNotification","to","Error","findUserInboxes","paths","inboxes","path","currentPath","discoverInbox","inbox","getDefaultInbox","inbox1","inbox2","find","name"],"mappings":";;;;;AAAA,SAASA,YAAT;AAEA,OAAO,IAAMC,gBAAgB;AAAA,sEAAG,iBAAOC,QAAP,EAAiBC,OAAjB,EAA0BC,kBAA1B,EAA8CC,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAExBA,EAFwB;AAAA;AAAA;AAAA;;AAAA,6CAGnBD,kBAAkB,CAACD,OAAD,EAAUE,EAAV,CAHC;;AAAA;AAAA,kBAQtB,IAAIC,KAAJ,CAAU,sDAAV,CARsB;;AAAA;AAAA;AAAA;AAAA,kBAUtB,IAAIA,KAAJ,aAVsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBL,gBAAgB;AAAA;AAAA;AAAA,GAAtB;AAcP,OAAO,IAAMM,eAAe;AAAA,uEAAG,kBAAMC,KAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBC,YAAAA,OAFuB,GAEb,EAFa;AAAA;AAAA;AAAA;AAAA,uCAIFD,KAJE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIVE,YAAAA,IAJU;AAKXC,YAAAA,WALW,GAKKD,IALL,CAKjBA,IALiB;AAAA;AAAA,mBAMLV,YAAY,CAACY,aAAb,CAA2BD,WAA3B,CANK;;AAAA;AAMnBE,YAAAA,KANmB;;AAQzB,gBAAIA,KAAJ,EAAW;AACTJ,cAAAA,OAAO,gCAAOA,OAAP,sBAAqBC,IAArB;AAA2BA,gBAAAA,IAAI,EAAEG;AAAjC,kBAAP;AACD;;AAVwB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAapBJ,OAboB;;AAAA;AAAA;AAAA;AAAA,kBAerB,IAAIH,KAAJ,cAfqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfC,eAAe;AAAA;AAAA;AAAA,GAArB;AAmBP,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACL,OAAD,EAAUM,MAAV,EAAkBC,MAAlB;AAAA,SAC7BP,OAAO,CAACQ,IAAR,CAAa,UAAAJ,KAAK;AAAA,WAAIA,KAAK,CAACK,IAAN,KAAeH,MAAnB;AAAA,GAAlB,KAAgDN,OAAO,CAACQ,IAAR,CAAa,UAAAJ,KAAK;AAAA,WAAIA,KAAK,CAACK,IAAN,KAAeF,MAAnB;AAAA,GAAlB,CADnB;AAAA,CAAxB","sourcesContent":["import { ldflexHelper } from './index';\n\nexport const sendNotification = async (opponent, content, createNotification, to) => {\n  try {\n    if (to) {\n      return createNotification(content, to);\n    }\n    /**\n     * If the opponent doesn't have an inbox, show an error\n     */\n    throw new Error('Error: The opponent does not have an available inbox');\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const findUserInboxes = async paths => {\n  try {\n    let inboxes = [];\n\n    for await (const path of paths) {\n      const { path: currentPath } = path;\n      const inbox = await ldflexHelper.discoverInbox(currentPath);\n\n      if (inbox) {\n        inboxes = [...inboxes, { ...path, path: inbox }];\n      }\n    }\n\n    return inboxes;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const getDefaultInbox = (inboxes, inbox1, inbox2) =>\n  inboxes.find(inbox => inbox.name === inbox1) || inboxes.find(inbox => inbox.name === inbox2);\n"]},"metadata":{},"sourceType":"module"}