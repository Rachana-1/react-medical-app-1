{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\src\\\\components\\\\Notifications\\\\children\\\\Notifications\\\\notifications.component.js\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useNotification, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { NotificationsWrapper } from \"./notifications.style\";\nimport { Bell, NotificationsPanel } from \"../index\";\nimport { useOnClickOutside } from \"../../../../hooks\";\nvar oldTimestamp;\n\n/**\n * Notification wrapper for the Bell Icon and the Notifications Panel\n */\nvar Notifications = function Notifications(_ref) {\n  var webId = _ref.webId,\n      inbox = _ref.inbox;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var ref = useRef();\n\n  var toggleNotifications = function toggleNotifications() {\n    return setIsOpen(!isOpen);\n  };\n  /**\n   * Notification hook from solid-react-components\n   */\n\n\n  var _useNotification = useNotification(webId),\n      notification = _useNotification.notification,\n      markAsRead = _useNotification.markAsReadNotification,\n      deleteNotification = _useNotification.deleteNotification,\n      fetchNotification = _useNotification.fetchNotification,\n      filterNotification = _useNotification.filterNotification;\n\n  var _useLiveUpdate = useLiveUpdate(),\n      timestamp = _useLiveUpdate.timestamp;\n\n  var notifications = notification.notifications,\n      unread = notification.unread,\n      notify = notification.notify;\n  /**\n   * pass date to string to compare time updates\n   * @type {*|string}\n   */\n\n  var currentTimestamp = timestamp && timestamp.toString();\n  useOnClickOutside(ref, function () {\n    return setIsOpen(false);\n  });\n  /**\n   * Fetch notifications from inbox\n   * @returns {Promise<void>}\n   */\n\n  var initNotifications = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setIsLoading(true);\n              _context.next = 4;\n              return fetchNotification(inbox);\n\n            case 4:\n              setIsLoading(false);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              setIsLoading(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function initNotifications() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * If webId and notify instance exist we will init notifications, similar to componentDidMount\n   */\n\n\n  useEffect(function () {\n    if (webId && notify) {\n      initNotifications();\n    }\n  }, [inbox, notify]);\n  /**\n   * Fetch new notifications when liveUpdate's timestamp changes, similar to componentWillUpdate\n   */\n\n  useEffect(function () {\n    if (currentTimestamp && oldTimestamp !== currentTimestamp) {\n      initNotifications();\n      oldTimestamp = currentTimestamp;\n    }\n  }, [timestamp]);\n  return /*#__PURE__*/React.createElement(NotificationsWrapper, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bell, {\n    unread: unread || 0,\n    onClick: toggleNotifications,\n    active: isOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CSSTransition, {\n    in: isOpen,\n    timeout: 300,\n    classNames: \"notifications\",\n    unmountOnExit: true,\n    mountOnEnter: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NotificationsPanel, Object.assign({\n    notifications: notifications,\n    markAsRead: markAsRead,\n    deleteNotification: deleteNotification,\n    tabs: inbox,\n    filterNotification: filterNotification,\n    isLoading: isLoading\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Notifications;","map":{"version":3,"sources":["D:/Downloads/Test HTML/testgenerator/Test_app/src/components/Notifications/children/Notifications/notifications.component.js"],"names":["React","useState","useRef","useEffect","CSSTransition","useNotification","useLiveUpdate","NotificationsWrapper","Bell","NotificationsPanel","useOnClickOutside","oldTimestamp","Notifications","webId","inbox","isOpen","setIsOpen","isLoading","setIsLoading","ref","toggleNotifications","notification","markAsRead","markAsReadNotification","deleteNotification","fetchNotification","filterNotification","timestamp","notifications","unread","notify","currentTimestamp","toString","initNotifications","tabs"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useNotification, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { NotificationsWrapper } from './notifications.style';\nimport { Bell, NotificationsPanel } from '../index';\nimport { useOnClickOutside } from '@hooks';\n\nlet oldTimestamp;\n\ntype Props = {\n  webId: String,\n  inbox: String\n};\n\n/**\n * Notification wrapper for the Bell Icon and the Notifications Panel\n */\nconst Notifications = ({ webId, inbox }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const ref = useRef();\n  const toggleNotifications = () => setIsOpen(!isOpen);\n  /**\n   * Notification hook from solid-react-components\n   */\n  const {\n    notification,\n    markAsReadNotification: markAsRead,\n    deleteNotification,\n    fetchNotification,\n    filterNotification\n  } = useNotification(webId);\n\n  const { timestamp } = useLiveUpdate();\n  const { notifications, unread, notify } = notification;\n  /**\n   * pass date to string to compare time updates\n   * @type {*|string}\n   */\n  const currentTimestamp = timestamp && timestamp.toString();\n  useOnClickOutside(ref, () => setIsOpen(false));\n\n  /**\n   * Fetch notifications from inbox\n   * @returns {Promise<void>}\n   */\n  const initNotifications = async () => {\n    try {\n      setIsLoading(true);\n      await fetchNotification(inbox);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * If webId and notify instance exist we will init notifications, similar to componentDidMount\n   */\n  useEffect(() => {\n    if (webId && notify) {\n      initNotifications();\n    }\n  }, [inbox, notify]);\n\n  /**\n   * Fetch new notifications when liveUpdate's timestamp changes, similar to componentWillUpdate\n   */\n  useEffect(() => {\n    if (currentTimestamp && oldTimestamp !== currentTimestamp) {\n      initNotifications();\n      oldTimestamp = currentTimestamp;\n    }\n  }, [timestamp]);\n\n  return (\n    <NotificationsWrapper ref={ref}>\n      <Bell unread={unread || 0} onClick={toggleNotifications} active={isOpen} />\n      <CSSTransition\n        in={isOpen}\n        timeout={300}\n        classNames=\"notifications\"\n        unmountOnExit\n        mountOnEnter\n      >\n        <NotificationsPanel\n          {...{\n            notifications,\n            markAsRead,\n            deleteNotification,\n            tabs: inbox,\n            filterNotification,\n            isLoading\n          }}\n        />\n      </CSSTransition>\n    </NotificationsWrapper>\n  );\n};\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"module"}