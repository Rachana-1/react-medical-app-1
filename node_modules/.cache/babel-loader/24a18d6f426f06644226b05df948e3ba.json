{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\src\\\\components\\\\AuthNavBar\\\\auth-nav-bar.component.js\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { NavBar, Notification } from \"./..\";\nimport { useTranslation } from 'react-i18next';\nimport { NavBarContainer } from \"./children\";\nimport { LanguageDropdown } from \"../Utils\";\nimport { ldflexHelper, errorToaster, storageHelper } from \"../../utils\";\nimport { NavigationItems } from \"../../constants\";\nvar AuthNavBar = React.memo(function (props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      inboxes = _useState2[0],\n      setInbox = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var navigation = NavigationItems.map(function (item) {\n    return _objectSpread({}, item, {\n      label: t(item.label)\n    });\n  });\n  var webId = props.webId;\n  /**\n   * Looks for all of the inbox containers in the pod and sets inboxes state\n   */\n\n  var discoverInbox = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _inboxes, globalInbox, appStorage, appInbox;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _inboxes = [];\n            /**\n             * Get user's global inbox path from pod.\n             */\n\n            _context.next = 4;\n            return ldflexHelper.discoverInbox(webId);\n\n          case 4:\n            globalInbox = _context.sent;\n\n            if (globalInbox) {\n              _inboxes = [].concat(_toConsumableArray(_inboxes), [{\n                path: globalInbox,\n                inboxName: t('navBar.notifications.global'),\n                shape: 'default'\n              }]);\n            }\n            /**\n             * Get user's game inbox path from pod.\n             */\n\n\n            _context.next = 8;\n            return storageHelper.getAppStorage(webId);\n\n          case 8:\n            appStorage = _context.sent;\n            _context.next = 11;\n            return ldflexHelper.discoverInbox(\"\".concat(appStorage, \"settings.ttl\"));\n\n          case 11:\n            appInbox = _context.sent;\n\n            /**\n             * create an inbox object to send over notification component\n             */\n            if (appInbox) {\n              _inboxes = [].concat(_toConsumableArray(_inboxes), [{\n                path: appInbox,\n                inboxName: t('navBar.notifications.tictactoe'),\n                shape: 'default'\n              }]);\n            }\n            /**\n             * If user doesn't has inbox in his pod will show an error and link to\n             * know how fix it.\n             */\n\n\n            if (_inboxes.length === 0) errorToaster(t('noInboxUser.message'), 'Error', {\n              label: t('noInboxUser.link.label'),\n              href: t('noInboxUser.link.href')\n            });\n            setInbox(_inboxes);\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n\n            /**\n             * Show general errors\n             */\n            errorToaster(_context.t0.message, t('navBar.notifications.fetchingError'));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 17]]);\n  })), [webId, inboxes]);\n  useEffect(function () {\n    if (webId) {\n      discoverInbox();\n    }\n  }, [webId]);\n  var history = props.history;\n  return /*#__PURE__*/React.createElement(NavBar, {\n    navigation: navigation,\n    sticky: true,\n    toolbar: [{\n      component: function component() {\n        return /*#__PURE__*/React.createElement(LanguageDropdown, Object.assign({\n          t: t,\n          i18n: i18n\n        }, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 28\n          }\n        }));\n      },\n      id: 'language'\n    }, {\n      component: function component() {\n        return /*#__PURE__*/React.createElement(Notification, Object.assign({\n          webId: webId,\n          inbox: inboxes\n        }, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 28\n          }\n        }));\n      },\n      id: 'notifications'\n    }, {\n      component: function component(props) {\n        return /*#__PURE__*/React.createElement(NavBarContainer, Object.assign({}, _objectSpread({\n          t: t,\n          i18n: i18n,\n          webId: webId,\n          history: history\n        }, props), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 31\n          }\n        }));\n      },\n      id: 'profile'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  });\n});\nexport default AuthNavBar;","map":{"version":3,"sources":["D:/Downloads/Test HTML/testgenerator/Test_app/src/components/AuthNavBar/auth-nav-bar.component.js"],"names":["React","useState","useEffect","useCallback","NavBar","Notification","useTranslation","NavBarContainer","LanguageDropdown","ldflexHelper","errorToaster","storageHelper","NavigationItems","AuthNavBar","memo","props","inboxes","setInbox","t","i18n","navigation","map","item","label","webId","discoverInbox","globalInbox","path","inboxName","shape","getAppStorage","appStorage","appInbox","length","href","message","history","component","id","inbox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { NavBar, Notification } from '@components';\nimport { useTranslation } from 'react-i18next';\nimport { NavBarContainer } from './children';\nimport { LanguageDropdown } from '@util-components';\nimport { ldflexHelper, errorToaster, storageHelper } from '@utils';\nimport { NavigationItems } from '@constants';\n\ntype Props = {\n  webId: string\n};\n\nconst AuthNavBar = React.memo((props: Props) => {\n  const [inboxes, setInbox] = useState([]);\n  const { t, i18n } = useTranslation();\n  const navigation = NavigationItems.map(item => ({ ...item, label: t(item.label) }));\n\n  const { webId } = props;\n  /**\n   * Looks for all of the inbox containers in the pod and sets inboxes state\n   */\n  const discoverInbox = useCallback(async () => {\n    try {\n      let inboxes = [];\n      /**\n       * Get user's global inbox path from pod.\n       */\n      const globalInbox = await ldflexHelper.discoverInbox(webId);\n\n      if (globalInbox) {\n        inboxes = [\n          ...inboxes,\n          { path: globalInbox, inboxName: t('navBar.notifications.global'), shape: 'default' }\n        ];\n      }\n      /**\n       * Get user's game inbox path from pod.\n       */\n      const appStorage = await storageHelper.getAppStorage(webId);\n      const appInbox = await ldflexHelper.discoverInbox(`${appStorage}settings.ttl`);\n\n      /**\n       * create an inbox object to send over notification component\n       */\n      if (appInbox) {\n        inboxes = [\n          ...inboxes,\n          { path: appInbox, inboxName: t('navBar.notifications.tictactoe'), shape: 'default' }\n        ];\n      }\n      /**\n       * If user doesn't has inbox in his pod will show an error and link to\n       * know how fix it.\n       */\n      if (inboxes.length === 0)\n        errorToaster(t('noInboxUser.message'), 'Error', {\n          label: t('noInboxUser.link.label'),\n          href: t('noInboxUser.link.href')\n        });\n      setInbox(inboxes);\n    } catch (error) {\n      /**\n       * Show general errors\n       */\n      errorToaster(error.message, t('navBar.notifications.fetchingError'));\n    }\n  }, [webId, inboxes]);\n\n  useEffect(() => {\n    if (webId) {\n      discoverInbox();\n    }\n  }, [webId]);\n  const { history } = props;\n\n  return (\n    <NavBar\n      navigation={navigation}\n      sticky\n      toolbar={[\n        {\n          component: () => <LanguageDropdown {...{ t, i18n }} />,\n          id: 'language'\n        },\n        {\n          component: () => <Notification {...{ webId, inbox: inboxes }} />,\n          id: 'notifications'\n        },\n        {\n          component: props => <NavBarContainer {...{ t, i18n, webId, history, ...props }} />,\n          id: 'profile'\n        }\n      ]}\n    />\n  );\n});\n\nexport default AuthNavBar;\n"]},"metadata":{},"sourceType":"module"}