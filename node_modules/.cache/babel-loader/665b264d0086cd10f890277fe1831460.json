{"ast":null,"code":"import _objectSpread from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Downloads\\\\Test HTML\\\\testgenerator\\\\Test_app\\\\src\\\\containers\\\\Profile\\\\components\\\\Image\\\\image.component.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport data from '@solid/query-ldflex';\nimport { Uploader, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { useTranslation } from 'react-i18next';\nimport { namedNode } from '@rdfjs/data-model';\nimport { ImageProfile } from \"../../../../components\";\nimport { successToaster, errorToaster } from \"../../../../utils\";\nexport var Image = function Image(_ref) {\n  var webId = _ref.webId,\n      defaultProfilePhoto = _ref.defaultProfilePhoto;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var latestUpdate = useLiveUpdate();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n  /**\n   * Fetch profile photo from card\n   */\n\n\n  var fetchPhoto = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var user, _image;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!webId) {\n                _context.next = 7;\n                break;\n              }\n\n              // We are fetching profile card document\n              user = data.user;\n              /**\n               * We access to document node using a node name\n               * hasPhoto is a new context that ldflex doesn't having\n               * we need to add it manually.\n               * if you want to know more about context please go to:\n               * https://github.com/digitalbazaar/jsonld.js\n               */\n\n              _context.next = 5;\n              return user.vcard_hasPhoto;\n\n            case 5:\n              _image = _context.sent;\n              setImage(_image && _image.value);\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              errorToaster(_context.t0.message, 'Error 500');\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function fetchPhoto() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchPhoto();\n  }, [webId, latestUpdate]);\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n\n  var updatePhoto = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(uri) {\n      var user;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              user = data.user;\n              _context2.next = 4;\n              return user.vcard_hasPhoto.set(namedNode(uri));\n\n            case 4:\n              successToaster(t('profile.uploadSuccess'), t('profile.successTitle'));\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              errorToaster(_context2.t0.message, t('profile.errorTitle'));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function updatePhoto(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var limit = 2100000;\n  return /*#__PURE__*/React.createElement(Uploader, Object.assign({\n    fileBase: webId && webId.split('/card')[0],\n    limitFiles: 1,\n    limitSize: limit,\n    accept: 'png,jpeg,jpg',\n    errorsText: {\n      sizeLimit: t('profile.errors.sizeLimit', {\n        limit: \"\".concat(limit / 1000000, \"Mbs\")\n      }),\n      unsupported: t('profile.errors.unsupported'),\n      maximumFiles: t('profile.errors.maximumFiles')\n    },\n    onError: function onError(error) {\n      if (error && error.statusText) {\n        errorToaster(error.statusText, 'Error');\n      }\n    },\n    onComplete: function onComplete(uploadedFiles) {\n      updatePhoto(uploadedFiles[uploadedFiles.length - 1].uri);\n    },\n    render: function render(props) {\n      return /*#__PURE__*/React.createElement(ImageProfile, Object.assign({}, _objectSpread({}, props, {\n        webId: webId,\n        photo: image || defaultProfilePhoto,\n        text: t('profile.upload'),\n        uploadingText: t('profile.uploadingText')\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }));\n    }\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["D:/Downloads/Test HTML/testgenerator/Test_app/src/containers/Profile/components/Image/image.component.js"],"names":["React","useState","useEffect","data","Uploader","useLiveUpdate","useTranslation","namedNode","ImageProfile","successToaster","errorToaster","Image","webId","defaultProfilePhoto","image","setImage","latestUpdate","t","fetchPhoto","user","vcard_hasPhoto","value","message","updatePhoto","uri","set","limit","fileBase","split","limitFiles","limitSize","accept","errorsText","sizeLimit","unsupported","maximumFiles","onError","error","statusText","onComplete","uploadedFiles","length","render","props","photo","text","uploadingText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport data from '@solid/query-ldflex';\nimport { Uploader, useLiveUpdate } from '@inrupt/solid-react-components';\nimport { useTranslation } from 'react-i18next';\nimport { namedNode } from '@rdfjs/data-model';\nimport { ImageProfile } from '@components';\nimport { successToaster, errorToaster } from '@utils';\n\ntype Props = {\n  webId: String\n};\n\nexport const Image = ({ webId, defaultProfilePhoto }: Props) => {\n  const [image, setImage] = useState('');\n\n  const latestUpdate = useLiveUpdate();\n\n  const { t } = useTranslation();\n\n  /**\n   * Fetch profile photo from card\n   */\n  const fetchPhoto = async () => {\n    try {\n      if (webId) {\n        // We are fetching profile card document\n        const { user } = data;\n        /**\n         * We access to document node using a node name\n         * hasPhoto is a new context that ldflex doesn't having\n         * we need to add it manually.\n         * if you want to know more about context please go to:\n         * https://github.com/digitalbazaar/jsonld.js\n         */\n        const image = await user.vcard_hasPhoto;\n\n        setImage(image && image.value);\n      }\n    } catch (error) {\n      errorToaster(error.message, 'Error 500');\n    }\n  };\n\n  useEffect(() => {\n    fetchPhoto();\n  }, [webId, latestUpdate]);\n\n  /**\n   * updatedPhoto will update the photo url on vcard file\n   * this function will check if user has image or hasPhoto node if not\n   * will just update it, the idea is use image instead of hasPhoto\n   * @params{String} uri photo url\n   */\n  const updatePhoto = async (uri: String) => {\n    try {\n      const { user } = data;\n      await user.vcard_hasPhoto.set(namedNode(uri));\n      successToaster(t('profile.uploadSuccess'), t('profile.successTitle'));\n    } catch (error) {\n      errorToaster(error.message, t('profile.errorTitle'));\n    }\n  };\n  const limit = 2100000;\n  return (\n    <Uploader\n      {...{\n        fileBase: webId && webId.split('/card')[0],\n        limitFiles: 1,\n        limitSize: limit,\n        accept: 'png,jpeg,jpg',\n        errorsText: {\n          sizeLimit: t('profile.errors.sizeLimit', {\n            limit: `${limit / 1000000}Mbs`\n          }),\n          unsupported: t('profile.errors.unsupported'),\n          maximumFiles: t('profile.errors.maximumFiles')\n        },\n        onError: error => {\n          if (error && error.statusText) {\n            errorToaster(error.statusText, 'Error');\n          }\n        },\n        onComplete: uploadedFiles => {\n          updatePhoto(uploadedFiles[uploadedFiles.length - 1].uri);\n        },\n        render: props => (\n          <ImageProfile\n            {...{\n              ...props,\n              webId,\n              photo: image || defaultProfilePhoto,\n              text: t('profile.upload'),\n              uploadingText: t('profile.uploadingText')\n            }}\n          />\n        )\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}