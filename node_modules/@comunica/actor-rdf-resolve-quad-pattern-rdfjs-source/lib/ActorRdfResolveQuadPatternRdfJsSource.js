"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfResolveQuadPatternRdfJsSource = void 0;
const bus_rdf_resolve_quad_pattern_1 = require("@comunica/bus-rdf-resolve-quad-pattern");
/**
 * A comunica RDFJS Source RDF Resolve Quad Pattern Actor.
 */
class ActorRdfResolveQuadPatternRdfJsSource extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {
    constructor(args) {
        super(args);
    }
    static nullifyVariables(term) {
        return !term || term.termType === 'Variable' ? undefined : term;
    }
    async test(action) {
        if (!this.hasContextSingleSourceOfType('rdfjsSource', action.context)) {
            throw new Error(`${this.name} requires a single source with an rdfjsSource to be present in the context.`);
        }
        const source = this.getContextSource(action.context);
        if (!source || typeof source === 'string' || (!('match' in source) && !source.value.match)) {
            throw new Error(`${this.name} received an invalid rdfjsSource.`);
        }
        return true;
    }
    getMetadata(source, pattern, context, data) {
        return async () => {
            if (source.countQuads) {
                // If the source provides a dedicated method for determining cardinality, use that.
                const totalItems = await source.countQuads(ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.subject), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.predicate), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.object), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.graph));
                return { totalItems };
            }
            // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.
            const totalItems = await new Promise((resolve, reject) => {
                let i = 0;
                const matches = source.match(ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.subject), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.predicate), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.object), ActorRdfResolveQuadPatternRdfJsSource.nullifyVariables(pattern.graph));
                matches.on('error', reject);
                matches.on('end', () => resolve(i));
                matches.on('data', () => i++);
            });
            return { totalItems };
        };
    }
    async getSource(context) {
        const source = this.getContextSource(context);
        return 'match' in source ? source : source.value;
    }
}
exports.ActorRdfResolveQuadPatternRdfJsSource = ActorRdfResolveQuadPatternRdfJsSource;
//# sourceMappingURL=ActorRdfResolveQuadPatternRdfJsSource.js.map